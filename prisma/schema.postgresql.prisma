// This is your Prisma schema file for PostgreSQL production
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id              String   @id @default(cuid())
  locale          String   @default("bg")
  name            String?
  email           String?
  phone           String?
  source          String?  // utm_source or "qr"/"ig_dm"
  consentMarketing Boolean @default(false)
  tags            String   // JSON string array: ["waitlist","loyalty","party"]
  utmId           String?
  
  // Relations
  rsvps           RSVP[]
  loyaltyCard     LoyaltyCard?
  utm             UTM?     @relation(fields: [utmId], references: [id])
  
  @@unique([email])
  @@index([tags])
  @@index([utmId])
}

model RSVP {
  id         String      @id @default(cuid())
  name       String
  email      String
  phone      String?
  sessionId  String
  session    EventSession @relation(fields: [sessionId], references: [id])
  seats      Int         @default(1)
  status     RSVPStatus  @default(PENDING)
  reservationCode String  @unique // Unique code for this reservation
  payment    Payment?
  utmId      String?
  
  // Relations
  lead       Lead?       @relation(fields: [leadId], references: [id])
  leadId     String?
  utm        UTM?        @relation(fields: [utmId], references: [id])
  
  @@index([email])
  @@index([sessionId])
  @@index([status])
  @@index([utmId])
  @@index([reservationCode])
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Event {
  id          String         @id @default(cuid())
  slug        String         @unique // coffee-tasting, launch-party
  title       String
  description String
  isTicketed  Boolean        @default(false)
  
  // Relations
  sessions    EventSession[]
  
  @@index([slug])
}

model EventSession {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  start      DateTime
  end        DateTime
  capacity   Int
  reserved   Int      @default(0) // derived but denormalized for speed
  
  // Relations
  rsvps      RSVP[]
  
  @@index([eventId])
  @@index([start])
}

model LoyaltyCard {
  id        String   @id @default(cuid())
  leadId    String   @unique
  lead      Lead     @relation(fields: [leadId], references: [id])
  points    Int      @default(0)
  tier      String   @default("bronze") // bronze, silver, gold, platinum
  
  @@index([points])
  @@index([tier])
}

model UTM {
  id        String   @id @default(cuid())
  source    String?
  medium    String?
  campaign  String?
  content   String?
  term      String?
  
  leads     Lead[]
  rsvps     RSVP[]
}

model Payment {
  id           String @id @default(cuid())
  rsvpId      String @unique
  rsvp        RSVP   @relation(fields: [rsvpId], references: [id])
  amount      Int    // in stotinki
  currency    String @default("BGN")
  status      String // created|paid|refunded
  provider    String // stripe
  providerRef String?
  
  @@index([status])
  @@index([provider])
}



model MenuItem {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   // BG name
  nameEn      String?  // EN name (optional)
  description String?  // BG description
  descriptionEn String? // EN description
  price       Float
  category    String   // coffee, food, dessert, beverage
  isAvailable Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  imageUrl    String?
  allergens   String?  // JSON string array: ["milk", "nuts"]
  origin      String?  // country of origin for coffee
  roastLevel  String?  // light, medium, dark
  tags        String?  // JSON string array: ["organic", "fair_trade"]
  
  @@index([category])
  @@index([isAvailable])
  @@index([isFeatured])
  @@index([price])
  @@index([tags])
}

model BusinessHours {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0=Sunday, 1=Monday, etc.
  openTime  String   // "08:00"
  closeTime String   // "22:00"
  isOpen    Boolean  @default(true)
  note      String?  // "Kitchen closes at 21:00"
  
  @@unique([dayOfWeek])
}

model Holiday {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String   // BG name
  nameEn      String?  // EN name
  date        DateTime
  isClosed    Boolean  @default(true)
  isOpen      Boolean  @default(false)
  openTime    String?  // "10:00" (if partial day)
  closeTime   String?  // "18:00" (if partial day)
  note        String?  // "New Year's Day"
  
  @@index([date])
  @@index([isOpen])
}

model GeneralSettings {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  businessName      String   @default("Mokka")
  businessPhone     String?
  businessEmail     String?
  businessAddress   String?
  businessWebsite   String?
  businessDescription String?
  socialMedia       String?  // JSON object: {"instagram": "@mokka", "facebook": "mokka"}
  logoUrl           String?
  primaryColor      String?  // hex color
  secondaryColor    String?  // hex color
  timezone          String   @default("Europe/Sofia")
  currency          String   @default("BGN")
  language          String   @default("bg")
  
  @@index([createdAt])
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   // JSON string for complex values
  description String?
  updatedAt   DateTime @updatedAt
  
  @@index([key])
}

model VerificationCode {
  id         String   @id @default(cuid())
  email      String   @unique
  code       String
  expiresAt  DateTime
  action     String   // 'cancel', 'modify'
  createdAt  DateTime @default(now())
  
  @@index([email])
  @@index([expiresAt])
}
